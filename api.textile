h1. The RemixWorld API and Videos

There are two ways you can upload videos to Remix:

# The first method assumes you will have your users upload a video to your server, then you will
  as a second step upload the video to our media server and post its metadata to RemixWorld.
# The second method allows you to have your users upload their video straight to our video server,
  then get redirected back to your server in order to post the metadata to RemixWorld while associating
  the uploaded file with the new video being created.

h2. 1) Users upload to your server, then you use our API in the background.

h3. Trade-offs

*{color:green} Simpler to integrate

*{color:red} Your server must handle the double-bandwidth of the video file upload and then passing it on to our video server.
*{color:red} Your server must handle error situations, such as when our video server rejects a file that seems to not be a video.

h3. API

We begin where your application has the video file uploaded by a user and you are ready to publish this video file, which means you
have also gathered a title, a description, and possibly some tags. The rest is a pretty simple two-step process:

TBD...

h2. 2) Users upload to our server directly, then get redirected back to your app.

h3. Trade-offs

*{color:red} More complex to integrate

*{color:green} Completely removes the load of uploads from your server
*{color:green} Provides several [optional] features to improve user experience (progress bar) and handle error situations more easily.

h3. Overview

Before getting into the details, you should understand the general process:

# You include a small iframe, hosted by our video server, in your webpage.
# When the user chooses a file, it is immediately uploaded. A progress bar will be shown with an expected time remaining.
# When the upload completes, if it failed or caused an error, the iframe is redirected back to your domain, to an error url.
# Or, if the upload was successful, the iframe is redirected back to your domain, to a success url.
# Your success url serves a simple iframe that communicates the video_file_id back to the parent window via Javascript.
# The parent window can now POST the information including the metadata (title, description, tags) to your server,
  and your server can then POST the metadata to Remix along with the video_file_id.

h3. 1. Generating the iframe url

Now, starting back at the beginning, _the key to everything here is generating the url for the iframe the user first sees._
For these instructions we will be assuming your app is located at 'http://app.example.com'.

h4. The bare minimum

First, we'll start with a Base URL:

    iframe_url = "http://videos.iremix.org/videos/upload_form"

Next, add your callback urls to the base upload url. These are required, and can be whatever url you want, but they MUST
be on the same domain as the parent page that the iframe will be included into (your app).

    success_url = "http://app.example.com/upload_success"
    error_url   = "http://app.example.com/upload_error"
    iframe_url  = iframe_url + "?success_url=" + CGI.escape(success_url) + "&error_url=" + CGI.escape(error_url)

At this point, you can stop and use iframe_url as-is to show the iframe to the user, or you can optionally add
either of the following two parameters to enable further features:

h4. Optional feature: "Uploading Notification"

This is a simple feature that will include an invisible iframe at a url that you specify, when an upload begins.
This can be used to notify the parent page via Javascript that the upload has started, in case you want to do
anything visually in the UI. For example, RemixWorld uses this feature to enable the "Create" button as soon
as the file begins its upload, so that the user can click it while their file is uploading, which causes our
form to be submitted as soon as the file has finished uploading.

    uploading_iframe_url = "http://app.example.com/video_uploading.html"
    iframe_url = iframe_url + "&uploading_iframe_url=" + CGI.escape(uploading_iframe_url)

Since this url will be loaded in an invisible iframe _inside_ the upload form iframe, the Javascript required to
communicate with the parent window must be preceded by "parent.parent." For example:

    parent.parent.video_is_uploading();

This Javascript code will access the parent window from the iframe-within-the-iframe, and runs the function
"video_is_uploading" which should be defined in the parent window, and can be crafted to do whatever you like.
Nothing visual needs to be rendered into this iframe as it is always hidden.

h4. Optional feature: "Cancel Uploading"

To do this, add a parameter named 'cancel_url' to the iframe url:

    cancel_url = "http://app.example.com/upload_canceled.html"
    iframe_url = iframe_url + "&cancel_url=" + CGI.escape(cancel_url)

When the user clicks "Cancel" on their upload, the iframe will simply be reloaded to this cancel url. However, this
url will be appended with a query string that is simply the entire original iframe url, so you can easily redirect
back to it after running any custom Javascript code you want:

    parent.dont_wait_for_upload();
    var url = window.location.toString().match(/\?(.+)$/)[1];
    document.location = url;

The above code will call a method defined in the parent window called "dont_wait_for_upload", then grab and redirect
to the url that the uploader iframe originally started as. RemixWorld uses this feature to disable its "Create"
button so that the user can't attempt to create a video without first uploading a video file, then redirect to
allow the user to try uploading a different file. All of this action is up to you, to be controlled by the
Javascript in your cancel page.

h3. 2. Handling the Callbacks

h4. Success url

Upon successful upload, the video server will redirect the iframe back to your supplied success_url, with two
query parameters added:

* filename
* video_file_id

At this success_url, your server should supply a small iframe that at the very least communicates the video_file_id back to the
parent window that houses the iframe. The basic Javascript you will need is as follows:

    var video_file_id = document.location.href.match(/video_file_id=([^&]+)/)[1];
    parent.set_video(video_file_id);

This Javascript code assumes "set_video" is a function name that has been defined in the parent window and sets the
video_file_id into a hidden field with name="video[video_file_id]" in the user form. You will probably want to show
a message in this iframe, perhaps showing the filename parameter that was passed back, as well as a "success" message
so the user knows their video has been uploaded. Also, if you want to provide a link to allow the user to "Upload a
different file", this is a good place to put it. That link can simply point to the original starting point, and when
clicked, will direct the iframe to load the uploader form fresh and ready for a new upload.

h4. Error url

When the uploaded video causes an error, the video server will redirect the iframe back to your supplied error_url,
with two query parameters added:

* error_code
* error_message

At this error_url, your server should render a page that shows the passed error message to the user. Our uploader handles this by
just quickly communicating the error to the parent page (which then shows the error on the main page), then redirecting the
iframe back to the starting point so that the user can try again at uploading a good video. This workflow is recommended,
but the implementation is up to you.

--------------------------------

Wednesday: Create scenarios for API files

Split:
  Zach implement scenarios for easy stuff
  Dan  implement static Video-upload client

